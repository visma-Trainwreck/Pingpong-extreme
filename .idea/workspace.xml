<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="269022ad-61dd-4029-a5e3-c6654acafc74" name="Default Changelist" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="153">
              <caret line="9" column="36" selection-start-line="9" selection-start-column="36" selection-end-line="9" selection-end-column="36" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/hosttest/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="51">
              <caret line="3" column="2" selection-start-line="3" selection-start-column="2" selection-end-line="3" selection-end-column="2" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/hosttest/server.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="623">
              <caret line="155" column="31" selection-start-line="155" selection-start-column="31" selection-end-line="155" selection-end-column="31" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.9.0/clojure-1.9.0.jar!/clojure/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="189">
              <caret line="4339" column="15" lean-forward="true" selection-start-line="4339" selection-start-column="15" selection-end-line="4339" selection-end-column="15" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>thread</find>
    </findStrings>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/hosttest/core.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/clientpocket.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/gamestats.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/MyGame.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/colliders.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/ring_server.clj" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/server.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="625" />
    <option name="width" value="1300" />
    <option name="height" value="1400" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="hosttest" type="b2602c69:ProjectViewProjectNode" />
              <item name="hosttest" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="hosttest" type="b2602c69:ProjectViewProjectNode" />
              <item name="hosttest" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="hosttest" type="b2602c69:ProjectViewProjectNode" />
              <item name="hosttest" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="hosttest" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1551186566706" />
    <property name="cursive.last.file.extension.C\:/Users/peter.l.rasmussen/Clojure Test Projects/hosttest/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../minserver" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\peter.l.rasmussen\Clojure Test Projects\hosttest\src\hosttest" />
    </key>
  </component>
  <component name="ReplState" timestamp="1551187070235">{:repl-history {:ide [], :local [{:command &quot;(ns hosttest.server\n  (:import (java.net InetAddress ServerSocket Socket SocketException)\n           (java.io InputStreamReader OutputStream OutputStreamWriter PrintWriter)\n           (clojure.lang LineNumberingPushbackReader))\n  (:use [clojure.main :only (repl)]))\n\n(defn on-thread\n  [f]\n  (doto (Thread. ^Runnable f)\n    (.start)))\n\n\n(defn close-socket\n  [^Socket s]\n  (when-not (.isClosed s)\n    (doto s\n      (.shutdownInput)\n      (.shutdownOutput)\n      (.close))))\n\n(defn accept-fn\n  [^Socket s connections fun]\n  (let [ins (.getInputStream s)\n        outs (.getOutputStream s)]\n    (on-thread #(do\n                  (dosync (commute connections conj s))\n                  ((try\n                     (fun ins outs)\n                     (catch Exception e))\n                    (close-socket s)\n                    (dosync (commute connections disj s)))))))\n\n(defstruct server-def :server-socket :connections)\n\n(defn- create-server-aux\n  [fun ^ServerSocket ss]\n  (let [connections (ref #{})]\n    (on-thread #(when-not (.isClosed)\n                  (try\n                      (accept-fn (.accept ss) connections fun)\n                     (catch Exception e))\n                    (recur)))\n               (struct-map server-def :server-socket ss :connections connections)))\n\n(defn create-server\n  \&quot;Creates a server socket on port. Upon accept, a new thread is\n  created which calls:\n  (fun input-stream output-stream)\n  Optional arguments support specifying a listen backlog and binding\n  to a specific endpoint.\&quot;\n  ([port fun backlog ^InetAddress bind-addr]\n   (create-server-aux fun (ServerSocket. port backlog bind-addr)))\n  ([port fun backlog]\n   (create-server-aux fun (ServerSocket. port backlog)))\n  ([port fun]\n   (create-server-aux fun (ServerSocket. port))))\n\n(defn close-server [server]\n  (doseq [s @(:connections server)]\n    (close-socket s))\n  (dosync (ref-set (:connections server) #{}))\n  (.close ^ServerSocket (:server-socket server)))\n\n(defn connection-count [server]\n  (count @(:connections server)))\n\n;;; REPL on a socket\n\n(defn- socket-repl [ins outs]\n  (binding [*in* (LineNumberingPushbackReader. (InputStreamReader. ins))\n            *out* (OutputStreamWriter. outs)\n            *err* (PrintWriter. ^OutputStream outs true)]\n    (repl)))\n\n(defn create-repl-server\n  \&quot;create a repl on a socket\&quot;\n  ([port backlog ^InetAddress bind-addr]\n   (create-server port socket-repl backlog bind-addr))\n  ([port backlog]\n   (create-server port socket-repl backlog))\n  ([port]\n   (create-server port socket-repl)))&quot;, :offset 2528, :ns &quot;hosttest.core&quot;} {:command &quot;(create-server 9000 \&quot;fun\&quot;)&quot;, :offset 24, :ns &quot;hosttest.core&quot;} {:command &quot;(create-repl-server)&quot;, :offset 19, :ns &quot;hosttest.core&quot;} {:command &quot;(defn tester [] (println \&quot;what\&quot;))&quot;, :offset 30, :ns &quot;hosttest.core&quot;} {:command &quot;(tester)&quot;, :offset 7, :ns &quot;hosttest.core&quot;} {:command &quot;(defn create-server\n  \&quot;Creates a server socket on port. Upon accept, a new thread is\n  created which calls:\n  (fun input-stream output-stream)\n  Optional arguments support specifying a listen backlog and binding\n  to a specific endpoint.\&quot;\n  ([port fun backlog ^InetAddress bind-addr]\n   (create-server-aux fun (ServerSocket. port backlog bind-addr)))\n  ([port fun backlog]\n   (create-server-aux fun (ServerSocket. port backlog)))\n  ([port fun]\n   (create-server-aux fun (ServerSocket. port))))&quot;, :offset 493, :ns &quot;hosttest.server&quot;} {:command &quot;(create-server)&quot;, :offset 14, :ns &quot;hosttest.core&quot;} {:command &quot;(ns hosttest.server\n  (:import (java.net InetAddress ServerSocket Socket SocketException)\n           (java.io InputStreamReader OutputStream OutputStreamWriter PrintWriter)\n           (clojure.lang LineNumberingPushbackReader))\n  (:use [clojure.main :only (repl)]))\n(defn- on-thread [f]\n  (doto (Thread. ^Runnable f)\n    (.start)))&quot;, :offset 331, :ns &quot;hosttest.core&quot;} {:command &quot;(ns hosttest.server\n  (:import (java.net InetAddress ServerSocket Socket SocketException)\n           (java.io InputStreamReader OutputStream OutputStreamWriter PrintWriter)\n           (clojure.lang LineNumberingPushbackReader))\n  (:use [clojure.main :only (repl)]))\n(defn- on-thread [f]\n  (doto (Thread. ^Runnable f)\n    (.start)))\n\n(defn- close-socket [^Socket s]\n  (when-not (.isClosed s)\n    (doto s\n      (.shutdownInput)\n      (.shutdownOutput)\n      (.close))))\n\n(defn- accept-fn [^Socket s connections fun]\n  (let [ins (.getInputStream s)\n        outs (.getOutputStream s)]\n    (on-thread #(do\n                  (dosync (commute connections conj s))\n                  (try\n                    (fun ins outs)\n                    (catch SocketException e))\n                  (close-socket s)\n                  (dosync (commute connections disj s))))))\n\n(defstruct server-def :server-socket :connections)\n\n(defn- create-server-aux [fun ^ServerSocket ss]\n  (let [connections (ref #{})]\n    (on-thread #(when-not (.isClosed ss)\n                  (try\n                    (accept-fn (.accept ss) connections fun)\n                    (catch SocketException e))\n                  (recur)))\n    (struct-map server-def :server-socket ss :connections connections)))\n\n(defn create-server\n  \&quot;Creates a server socket on port. Upon accept, a new thread is\n  created which calls:\n  (fun input-stream output-stream)\n  Optional arguments support specifying a listen backlog and binding\n  to a specific endpoint.\&quot;\n  ([port fun backlog ^InetAddress bind-addr]\n   (create-server-aux fun (ServerSocket. port backlog bind-addr)))\n  ([port fun backlog]\n   (create-server-aux fun (ServerSocket. port backlog)))\n  ([port fun]\n   (create-server-aux fun (ServerSocket. port))))\n\n(defn close-server [server]\n  (doseq [s @(:connections server)]\n    (close-socket s))\n  (dosync (ref-set (:connections server) #{}))\n  (.close ^ServerSocket (:server-socket server)))\n\n(defn connection-count [server]\n  (count @(:connections server)))\n\n;;; REPL on a socket\n\n(defn- socket-repl [ins outs]\n  (binding [*in* (LineNumberingPushbackReader. (InputStreamReader. ins))\n            *out* (OutputStreamWriter. outs)\n            *err* (PrintWriter. ^OutputStream outs true)]\n    (repl)))\n\n(defn create-repl-server\n  \&quot;create a repl on a socket\&quot;\n  ([port backlog ^InetAddress bind-addr]\n   (create-server port socket-repl backlog bind-addr))\n  ([port backlog]\n   (create-server port socket-repl backlog))\n  ([port]\n   (create-server port socket-repl)))&quot;, :offset 2512, :ns &quot;hosttest.core&quot;} {:command &quot;(ns hosttest.MyGame\n  (:require [quil.core :as q]\n            [quil.middleware :as m]\n            [hosttest.gamestats :as gamestats]\n            [hosttest.colliders :as colliders]))\n\n\n\n\n\n\n\n\n\n\n\n(defn scoreadd\n  [statelist]\n\n    (map (fn [state] (cond\n                       (= \&quot;score\&quot; (:role state)) (let [ball (first (filter (fn [state] (if (= \&quot;ball\&quot; (:role state)) state nil))statelist))]\n                                                   (if (&lt; (:x ball) -20)\n                                                     (conj state {:player2 (+ 1 (:player2 state))})\n                                                     (conj state {:player1 (+ 1 (:player1 state))})))\n                       (= \&quot;player\&quot; (:role state)) (first gamestats/mock-state)\n                       (= \&quot;enemy\&quot; (:role state)) (nth gamestats/mock-state 2)\n                       (= \&quot;ball\&quot; (:role state)) (let [ball (second gamestats/mock-state)\n                                                      ranvelX (+ 3 (rand-int 8))\n                                                      ranvelY (+ 1 (rand-int 4))\n                                                      dir (if (= 1 (- 1 (rand-int 2)))\n                                                            1\n                                                            -1)]\n                                                  (conj ball {:velX (* dir ranvelX) :velY ranvelY}))\n                       :else state\n                       ))statelist)\n  )\n\n\n\n(defn reset?\n  [ball]\n  (let [x (:x ball)]\n    (if (or (&lt; x -20) (&gt; x 800))\n      true\n      false)))\n\n(defn writescore\n  [state]\n  (let [player1score (:player1 state)\n        player2score (:player2 state)\n        player1 (if gamestats/aipower\n                  \&quot;Nadal\&quot;\n                  \&quot;Player\&quot;)]\n    (q/text (str player1 \&quot;   \&quot; player1score \&quot;        |        \&quot; player2score \&quot;   Mr AI\&quot;) 350 50)\n    )\n  )\n\n(defn writeballspeed\n  [state]\n  (let [velX (:velX state)\n        velY (:velY state)\n        rawspeed (Math/sqrt (+ (* velX velX) (* velY velY)))\n        speed (int (Math/floor rawspeed))]\n    (q/text (str \&quot;speed:  \&quot; speed) 400 90)\n    ;(q/text (str \&quot;SpeedY: \&quot; velY \&quot;   speedX: \&quot; velX) 400 110)\n    ))\n\n\n(defn drawplayer\n  [state]\n  (let [x (:x state)\n        y (:y state)\n        color (:color state)]\n    (q/fill color 255 255)\n    (q/rect x y (first gamestats/playerSize) (second gamestats/playerSize))\n    )\n  )\n\n(defn drawball\n  [state]\n  ;Draw baaaaaaalll\n  (let [x (:x state)\n        y (:y state)\n        color (:color state)\n        velX (Math/sqrt (Math/pow (:velX state) 2))\n        velY (:velY state)]\n\n    (dorun  (cond\n        (&gt; 15 velX) (q/fill  0 255 255)\n        (and (&lt;= 15 velX) (&gt; 10 velX)) (q/fill 0 125 255)\n        (and (&lt;= 10 velX) (&gt; 4 velX)) (q/fill 0 0 255)\n        :else (q/fill 0 0 0))\n    (q/rect x y (first gamestats/ballsize) (second gamestats/ballsize))\n    )))\n\n\n\n\n\n\n\n(defn setup []\n  ;tell quil what framerate / speed of the game and color mode, also gives the initialt state of the game.\n  (q/frame-rate 120)\n  (q/color-mode :hsb)\n  gamestats/mock-state)\n\n\n(defn drawIt\n  [statelist]\n  ;map through the list of states, and draw them. and returns the updated list. DOrun is there to make the lazy map do stuff\n  (q/clear)\n  (dorun (map (fn [state] (let [role (:role state)]\n                            (cond (= \&quot;ball\&quot; role) (do (drawball state) (writeballspeed state))\n                                  (= \&quot;player\&quot; role) (drawplayer state)\n                                  (= \&quot;enemy\&quot; role) (drawplayer state)\n                                  (= \&quot;score\&quot; role) (writescore state)))\n                ) statelist))\n  )\n\n\n(defn player1\n  [statelist]\n  (q/background 240)\n  (for [state statelist]\n    (do (q/fill (:color state) 255 255)\n        (q/with-translation\n          [(/ (q/width) 2)\n           (/ (q/height) 2)]\n          (q/rect (:x state) (:y state) 20 20)))))\n\n\n\n\n\n(defn playermover\n  [state]\n  ;keylistener! If a key is being pressed AND its the w or s key, then we do stuff, else we return the old state...and not move.\n  ;update! it also sets the new velocity in the state depentant on which key is pressed!\n  (let [state1 (cond\n                (and (q/key-pressed?) (= (q/raw-key) \\w)) (conj state {:y (- (:y state) gamestats/playerspeed) :velY gamestats/playerspeed})\n                (and (q/key-pressed?) (= (q/raw-key) \\s)) (conj state {:y (+ (:y state) gamestats/playerspeed) :velY (* -1 gamestats/playerspeed)})\n                :else (conj state { :velY 0}))]\n    (colliders/outofbounds state1))\n  )\n\n(defn enemyMover\n  [ball enemy]\n  ;The enemy moves compared to the ball. If the ball is moving away from it, it will seek to move to the middle\n  ;if the ball is moving towards the enemy it will match its own coordiants with the balls.\n  (let [ballY (:y ball)\n        ballv (:velX ball)\n        enemyY (:y enemy)\n        role (:role enemy)\n        state (cond\n                (and (= \&quot;enemy\&quot; role) (neg? ballv)) (cond\n                                                      (&lt; enemyY 200) (conj enemy {:y (+ (:y enemy) gamestats/playerspeed)})\n                                                      (&gt; enemyY 200) (conj enemy {:y (- (:y enemy) gamestats/playerspeed)})\n                                                      :else enemy)\n                (and (= \&quot;player\&quot; role) (pos-int? ballv))(cond\n                                                          (&lt; enemyY 200) (conj enemy {:y (+ (:y enemy) gamestats/playerspeed)})\n                                                          (&gt; enemyY 200) (conj enemy {:y (- (:y enemy) gamestats/playerspeed)})\n                                                          :else enemy)\n\n                (&lt; (- ballY 50) enemyY) (conj enemy {:y (- (:y enemy) gamestats/playerspeed)})\n                (&gt; (- ballY 50) enemyY) (conj enemy {:y (+ (:y enemy) gamestats/playerspeed)})\n                :else enemy)]\n      (colliders/outofbounds state)\n    ))\n\n(defn ballmover\n  [statelist]\n  ;the ball always moves, check if its above or below the top or bottom, and if it does we invert its Y velocity\n  ;If the ball is hitting a player then we invert its X velocity\n  ;if nothing is hiting the ball and we are within the game window the ball just continues\n  (let [ball\n        (if (colliders/checkBoundsY (second statelist))\n          (colliders/bounce-hori (second statelist))\n          (colliders/bounce-powerup statelist))\n        x (:x ball)\n        y (:y ball)\n        velX (:velX ball)\n        velY (:velY ball)]\n    (conj ball {:x (+ x velX) :y (+ y velY)})\n    ))\n\n(defn update_main [statelist]\n  ; check if the ball is out of bounds, and reset the state if it is!\n (let [ball (first (filter (fn [state] (if (= \&quot;ball\&quot; (:role state)) state nil)) statelist))]\n  (if (reset? ball)\n    (scoreadd statelist)\n    ;map though the statelist\n    (map (fn [state] (let [role (:role state)]\n                     (cond\n                       (and (= role \&quot;player\&quot;) (not gamestats/aipower)) (playermover state)\n                       (and (= role \&quot;player\&quot;) gamestats/aipower) (enemyMover (second statelist) (first statelist))\n                       (= role \&quot;ball\&quot;) (ballmover statelist)\n                       (= role \&quot;enemy\&quot;) (enemyMover (second statelist) (nth statelist 2))\n                       :else state))) statelist))))\n\n\n(q/defsketch lala\n             :title \&quot;tadaaa\&quot;\n             :size [800 600]\n             :setup setup\n             :draw drawIt\n             :update update_main\n             :features [:keep-on-top]\n             :middleware [m/fun-mode])\n&quot;, :offset 7519, :ns &quot;hosttest.server&quot;} {:command &quot;ring.adapter.jetty&quot;, :offset 18, :ns &quot;hosttest.server&quot;} {:command &quot;ring.adapter.jetty/start-jetty&quot;, :offset 30, :ns &quot;hosttest.server&quot;} {:command &quot;(-main )&quot;, :offset 8, :ns &quot;hosttest.server&quot;} {:command &quot;((resolve 'inc) 3)&quot;, :offset 17, :ns &quot;hosttest.server&quot;} {:command &quot;25&quot;, :offset 2, :ns &quot;hosttest.server&quot;} {:command &quot;42&quot;, :offset 2, :ns &quot;hosttest.server&quot;} {:command &quot;(-main)&quot;, :offset 6, :ns &quot;hosttest.server&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="Repl" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="hosttest" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="269022ad-61dd-4029-a5e3-c6654acafc74" name="Default Changelist" comment="" />
      <created>1551007941393</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1551007941393</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-7" y="-7" width="2062" height="1126" extended-state="6" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.1878122" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" visible="true" weight="0.21730383" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info active="true" anchor="right" id="REPL" order="6" sideWeight="0.5020408" side_tool="true" visible="true" weight="0.24525474" />
      <window_info anchor="right" id="Leiningen" order="7" sideWeight="0.4979592" weight="0.3295302" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout>
    <layout-to-restore>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.252349" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info active="true" anchor="bottom" id="Terminal" order="7" visible="true" weight="0.305949" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="REPL" order="6" side_tool="true" visible="true" weight="0.11543624" />
      <window_info anchor="right" id="Leiningen" order="7" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout-to-restore>
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.9.0/clojure-1.9.0.jar!/clojure/lang/LineNumberingPushbackReader.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="155">
          <caret line="12" column="11" selection-start-line="12" selection-start-column="11" selection-end-line="12" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/io/OutputStreamWriter.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-401">
          <caret line="106" column="11" selection-start-line="106" selection-start-column="11" selection-end-line="106" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/io/PrintWriter.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-4720">
          <caret line="97" column="11" selection-start-line="97" selection-start-column="11" selection-end-line="97" selection-end-column="11" />
          <folding>
            <element signature="e#2814#2815#0" expanded="true" />
            <element signature="e#2846#2847#0" expanded="true" />
            <element signature="e#4478#4479#0" expanded="true" />
            <element signature="e#4540#4541#0" expanded="true" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/net/Socket.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="455">
          <caret line="914" column="34" lean-forward="true" selection-start-line="914" selection-start-column="34" selection-end-line="914" selection-end-column="34" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/io/Writer.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="251">
          <caret line="247" column="16" selection-start-line="247" selection-start-column="16" selection-end-line="247" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/net/ServerSocket.java">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="506">
          <caret line="512" column="18" selection-start-line="512" selection-start-column="18" selection-end-line="512" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/clientpocket.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="102">
          <caret line="6" selection-start-line="6" selection-end-line="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/gamestats.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="12" selection-start-column="12" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/colliders.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-281">
          <caret line="1" column="21" selection-start-line="1" selection-start-column="21" selection-end-line="1" selection-end-column="21" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/MyGame.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1674">
          <caret line="191" column="29" lean-forward="true" selection-start-line="191" selection-start-column="29" selection-end-line="191" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/ring_server.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="17">
          <caret line="1" column="24" selection-start-line="1" selection-start-column="24" selection-end-line="1" selection-end-column="24" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.9.0/clojure-1.9.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="189">
          <caret line="4339" column="15" lean-forward="true" selection-start-line="4339" selection-start-column="15" selection-end-line="4339" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="153">
          <caret line="9" column="36" selection-start-line="9" selection-start-column="36" selection-end-line="9" selection-end-column="36" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="51">
          <caret line="3" column="2" selection-start-line="3" selection-start-column="2" selection-end-line="3" selection-end-column="2" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/server.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="623">
          <caret line="155" column="31" selection-start-line="155" selection-start-column="31" selection-end-line="155" selection-end-column="31" />
        </state>
      </provider>
    </entry>
  </component>
</project>