<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="269022ad-61dd-4029-a5e3-c6654acafc74" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/hosttest.iml" beforeDir="false" afterPath="$PROJECT_DIR$/hosttest.iml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/hosttest/server.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/hosttest/server.clj" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/hosttest/cmdmonitor.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="297">
              <caret line="9" column="35" lean-forward="true" selection-start-line="9" selection-start-column="35" selection-end-line="9" selection-end-column="35" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="HTML File" />
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>thread</find>
      <find>pprint</find>
      <find>cmdhandler</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/hosttest/core.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/clientpocket.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/gamestats.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/colliders.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/ring_server.clj" />
        <option value="$PROJECT_DIR$/resources/firstpage.html" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/MyGame.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/server.clj" />
        <option value="$PROJECT_DIR$/src/hosttest/cmdmonitor.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="625" />
    <option name="width" value="1300" />
    <option name="height" value="1400" />
  </component>
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="pingpong-extreme" type="b2602c69:ProjectViewProjectNode" />
              <item name="pingpong-extreme" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="pingpong-extreme" type="b2602c69:ProjectViewProjectNode" />
              <item name="pingpong-extreme" type="462c0819:PsiDirectoryNode" />
              <item name="resources" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="pingpong-extreme" type="b2602c69:ProjectViewProjectNode" />
              <item name="pingpong-extreme" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="pingpong-extreme" type="b2602c69:ProjectViewProjectNode" />
              <item name="pingpong-extreme" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="hosttest" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="DefaultHtmlFileTemplate" value="HTML File" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1551339893335" />
    <property name="cursive.last.file.extension.C\:/Users/morten.schioler/u/project/ice/code/ping-pong/pingpong-extreme/src" value="clj" />
    <property name="cursive.last.file.extension.C\:/Users/peter.l.rasmussen/Clojure Test Projects/hosttest/src" value="clj" />
    <property name="full.screen.before.presentation.mode" value="false" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../pingpong-client" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="editor.preferences.smartKeys" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\peter.l.rasmussen\Clojure Test Projects\hosttest\src\hosttest" />
    </key>
  </component>
  <component name="ReplState" timestamp="1551366466316">{:repl-history {:ide [], :local [{:command &quot;(ns hosttest.server\n  (:import (java.net InetAddress ServerSocket Socket SocketException)\n           (java.io InputStreamReader OutputStream OutputStreamWriter PrintWriter)\n           (clojure.lang LineNumberingPushbackReader))\n  (:use [clojure.main :only (repl)]))\n\n(defn on-thread\n  [f]\n  (doto (Thread. ^Runnable f)\n    (.start)))\n\n\n(defn close-socket\n  [^Socket s]\n  (when-not (.isClosed s)\n    (doto s\n      (.shutdownInput)\n      (.shutdownOutput)\n      (.close))))\n\n(defn accept-fn\n  [^Socket s connections fun]\n  (let [ins (.getInputStream s)\n        outs (.getOutputStream s)]\n    (on-thread #(do\n                  (dosync (commute connections conj s))\n                  ((try\n                     (fun ins outs)\n                     (catch Exception e))\n                    (close-socket s)\n                    (dosync (commute connections disj s)))))))\n\n(defstruct server-def :server-socket :connections)\n\n(defn- create-server-aux\n  [fun ^ServerSocket ss]\n  (let [connections (ref #{})]\n    (on-thread #(when-not (.isClosed)\n                  (try\n                      (accept-fn (.accept ss) connections fun)\n                     (catch Exception e))\n                    (recur)))\n               (struct-map server-def :server-socket ss :connections connections)))\n\n(defn create-server\n  \&quot;Creates a server socket on port. Upon accept, a new thread is\n  created which calls:\n  (fun input-stream output-stream)\n  Optional arguments support specifying a listen backlog and binding\n  to a specific endpoint.\&quot;\n  ([port fun backlog ^InetAddress bind-addr]\n   (create-server-aux fun (ServerSocket. port backlog bind-addr)))\n  ([port fun backlog]\n   (create-server-aux fun (ServerSocket. port backlog)))\n  ([port fun]\n   (create-server-aux fun (ServerSocket. port))))\n\n(defn close-server [server]\n  (doseq [s @(:connections server)]\n    (close-socket s))\n  (dosync (ref-set (:connections server) #{}))\n  (.close ^ServerSocket (:server-socket server)))\n\n(defn connection-count [server]\n  (count @(:connections server)))\n\n;;; REPL on a socket\n\n(defn- socket-repl [ins outs]\n  (binding [*in* (LineNumberingPushbackReader. (InputStreamReader. ins))\n            *out* (OutputStreamWriter. outs)\n            *err* (PrintWriter. ^OutputStream outs true)]\n    (repl)))\n\n(defn create-repl-server\n  \&quot;create a repl on a socket\&quot;\n  ([port backlog ^InetAddress bind-addr]\n   (create-server port socket-repl backlog bind-addr))\n  ([port backlog]\n   (create-server port socket-repl backlog))\n  ([port]\n   (create-server port socket-repl)))&quot;, :offset 2528, :ns &quot;hosttest.core&quot;} {:command &quot;(create-server 9000 \&quot;fun\&quot;)&quot;, :offset 24, :ns &quot;hosttest.core&quot;} {:command &quot;(create-repl-server)&quot;, :offset 19, :ns &quot;hosttest.core&quot;} {:command &quot;(defn tester [] (println \&quot;what\&quot;))&quot;, :offset 30, :ns &quot;hosttest.core&quot;} {:command &quot;(tester)&quot;, :offset 7, :ns &quot;hosttest.core&quot;} {:command &quot;(defn create-server\n  \&quot;Creates a server socket on port. Upon accept, a new thread is\n  created which calls:\n  (fun input-stream output-stream)\n  Optional arguments support specifying a listen backlog and binding\n  to a specific endpoint.\&quot;\n  ([port fun backlog ^InetAddress bind-addr]\n   (create-server-aux fun (ServerSocket. port backlog bind-addr)))\n  ([port fun backlog]\n   (create-server-aux fun (ServerSocket. port backlog)))\n  ([port fun]\n   (create-server-aux fun (ServerSocket. port))))&quot;, :offset 493, :ns &quot;hosttest.server&quot;} {:command &quot;(create-server)&quot;, :offset 14, :ns &quot;hosttest.core&quot;} {:command &quot;(ns hosttest.server\n  (:import (java.net InetAddress ServerSocket Socket SocketException)\n           (java.io InputStreamReader OutputStream OutputStreamWriter PrintWriter)\n           (clojure.lang LineNumberingPushbackReader))\n  (:use [clojure.main :only (repl)]))\n(defn- on-thread [f]\n  (doto (Thread. ^Runnable f)\n    (.start)))&quot;, :offset 331, :ns &quot;hosttest.core&quot;} {:command &quot;(ns hosttest.server\n  (:import (java.net InetAddress ServerSocket Socket SocketException)\n           (java.io InputStreamReader OutputStream OutputStreamWriter PrintWriter)\n           (clojure.lang LineNumberingPushbackReader))\n  (:use [clojure.main :only (repl)]))\n(defn- on-thread [f]\n  (doto (Thread. ^Runnable f)\n    (.start)))\n\n(defn- close-socket [^Socket s]\n  (when-not (.isClosed s)\n    (doto s\n      (.shutdownInput)\n      (.shutdownOutput)\n      (.close))))\n\n(defn- accept-fn [^Socket s connections fun]\n  (let [ins (.getInputStream s)\n        outs (.getOutputStream s)]\n    (on-thread #(do\n                  (dosync (commute connections conj s))\n                  (try\n                    (fun ins outs)\n                    (catch SocketException e))\n                  (close-socket s)\n                  (dosync (commute connections disj s))))))\n\n(defstruct server-def :server-socket :connections)\n\n(defn- create-server-aux [fun ^ServerSocket ss]\n  (let [connections (ref #{})]\n    (on-thread #(when-not (.isClosed ss)\n                  (try\n                    (accept-fn (.accept ss) connections fun)\n                    (catch SocketException e))\n                  (recur)))\n    (struct-map server-def :server-socket ss :connections connections)))\n\n(defn create-server\n  \&quot;Creates a server socket on port. Upon accept, a new thread is\n  created which calls:\n  (fun input-stream output-stream)\n  Optional arguments support specifying a listen backlog and binding\n  to a specific endpoint.\&quot;\n  ([port fun backlog ^InetAddress bind-addr]\n   (create-server-aux fun (ServerSocket. port backlog bind-addr)))\n  ([port fun backlog]\n   (create-server-aux fun (ServerSocket. port backlog)))\n  ([port fun]\n   (create-server-aux fun (ServerSocket. port))))\n\n(defn close-server [server]\n  (doseq [s @(:connections server)]\n    (close-socket s))\n  (dosync (ref-set (:connections server) #{}))\n  (.close ^ServerSocket (:server-socket server)))\n\n(defn connection-count [server]\n  (count @(:connections server)))\n\n;;; REPL on a socket\n\n(defn- socket-repl [ins outs]\n  (binding [*in* (LineNumberingPushbackReader. (InputStreamReader. ins))\n            *out* (OutputStreamWriter. outs)\n            *err* (PrintWriter. ^OutputStream outs true)]\n    (repl)))\n\n(defn create-repl-server\n  \&quot;create a repl on a socket\&quot;\n  ([port backlog ^InetAddress bind-addr]\n   (create-server port socket-repl backlog bind-addr))\n  ([port backlog]\n   (create-server port socket-repl backlog))\n  ([port]\n   (create-server port socket-repl)))&quot;, :offset 2512, :ns &quot;hosttest.core&quot;} {:command &quot;(ns hosttest.MyGame\n  (:require [quil.core :as q]\n            [quil.middleware :as m]\n            [hosttest.gamestats :as gamestats]\n            [hosttest.colliders :as colliders]))\n\n\n\n\n\n\n\n\n\n\n\n(defn scoreadd\n  [statelist]\n\n    (map (fn [state] (cond\n                       (= \&quot;score\&quot; (:role state)) (let [ball (first (filter (fn [state] (if (= \&quot;ball\&quot; (:role state)) state nil))statelist))]\n                                                   (if (&lt; (:x ball) -20)\n                                                     (conj state {:player2 (+ 1 (:player2 state))})\n                                                     (conj state {:player1 (+ 1 (:player1 state))})))\n                       (= \&quot;player\&quot; (:role state)) (first gamestats/mock-state)\n                       (= \&quot;enemy\&quot; (:role state)) (nth gamestats/mock-state 2)\n                       (= \&quot;ball\&quot; (:role state)) (let [ball (second gamestats/mock-state)\n                                                      ranvelX (+ 3 (rand-int 8))\n                                                      ranvelY (+ 1 (rand-int 4))\n                                                      dir (if (= 1 (- 1 (rand-int 2)))\n                                                            1\n                                                            -1)]\n                                                  (conj ball {:velX (* dir ranvelX) :velY ranvelY}))\n                       :else state\n                       ))statelist)\n  )\n\n\n\n(defn reset?\n  [ball]\n  (let [x (:x ball)]\n    (if (or (&lt; x -20) (&gt; x 800))\n      true\n      false)))\n\n(defn writescore\n  [state]\n  (let [player1score (:player1 state)\n        player2score (:player2 state)\n        player1 (if gamestats/aipower\n                  \&quot;Nadal\&quot;\n                  \&quot;Player\&quot;)]\n    (q/text (str player1 \&quot;   \&quot; player1score \&quot;        |        \&quot; player2score \&quot;   Mr AI\&quot;) 350 50)\n    )\n  )\n\n(defn writeballspeed\n  [state]\n  (let [velX (:velX state)\n        velY (:velY state)\n        rawspeed (Math/sqrt (+ (* velX velX) (* velY velY)))\n        speed (int (Math/floor rawspeed))]\n    (q/text (str \&quot;speed:  \&quot; speed) 400 90)\n    ;(q/text (str \&quot;SpeedY: \&quot; velY \&quot;   speedX: \&quot; velX) 400 110)\n    ))\n\n\n(defn drawplayer\n  [state]\n  (let [x (:x state)\n        y (:y state)\n        color (:color state)]\n    (q/fill color 255 255)\n    (q/rect x y (first gamestats/playerSize) (second gamestats/playerSize))\n    )\n  )\n\n(defn drawball\n  [state]\n  ;Draw baaaaaaalll\n  (let [x (:x state)\n        y (:y state)\n        color (:color state)\n        velX (Math/sqrt (Math/pow (:velX state) 2))\n        velY (:velY state)]\n\n    (dorun  (cond\n        (&gt; 15 velX) (q/fill  0 255 255)\n        (and (&lt;= 15 velX) (&gt; 10 velX)) (q/fill 0 125 255)\n        (and (&lt;= 10 velX) (&gt; 4 velX)) (q/fill 0 0 255)\n        :else (q/fill 0 0 0))\n    (q/rect x y (first gamestats/ballsize) (second gamestats/ballsize))\n    )))\n\n\n\n\n\n\n\n(defn setup []\n  ;tell quil what framerate / speed of the game and color mode, also gives the initialt state of the game.\n  (q/frame-rate 120)\n  (q/color-mode :hsb)\n  gamestats/mock-state)\n\n\n(defn drawIt\n  [statelist]\n  ;map through the list of states, and draw them. and returns the updated list. DOrun is there to make the lazy map do stuff\n  (q/clear)\n  (dorun (map (fn [state] (let [role (:role state)]\n                            (cond (= \&quot;ball\&quot; role) (do (drawball state) (writeballspeed state))\n                                  (= \&quot;player\&quot; role) (drawplayer state)\n                                  (= \&quot;enemy\&quot; role) (drawplayer state)\n                                  (= \&quot;score\&quot; role) (writescore state)))\n                ) statelist))\n  )\n\n\n(defn player1\n  [statelist]\n  (q/background 240)\n  (for [state statelist]\n    (do (q/fill (:color state) 255 255)\n        (q/with-translation\n          [(/ (q/width) 2)\n           (/ (q/height) 2)]\n          (q/rect (:x state) (:y state) 20 20)))))\n\n\n\n\n\n(defn playermover\n  [state]\n  ;keylistener! If a key is being pressed AND its the w or s key, then we do stuff, else we return the old state...and not move.\n  ;update! it also sets the new velocity in the state depentant on which key is pressed!\n  (let [state1 (cond\n                (and (q/key-pressed?) (= (q/raw-key) \\w)) (conj state {:y (- (:y state) gamestats/playerspeed) :velY gamestats/playerspeed})\n                (and (q/key-pressed?) (= (q/raw-key) \\s)) (conj state {:y (+ (:y state) gamestats/playerspeed) :velY (* -1 gamestats/playerspeed)})\n                :else (conj state { :velY 0}))]\n    (colliders/outofbounds state1))\n  )\n\n(defn enemyMover\n  [ball enemy]\n  ;The enemy moves compared to the ball. If the ball is moving away from it, it will seek to move to the middle\n  ;if the ball is moving towards the enemy it will match its own coordiants with the balls.\n  (let [ballY (:y ball)\n        ballv (:velX ball)\n        enemyY (:y enemy)\n        role (:role enemy)\n        state (cond\n                (and (= \&quot;enemy\&quot; role) (neg? ballv)) (cond\n                                                      (&lt; enemyY 200) (conj enemy {:y (+ (:y enemy) gamestats/playerspeed)})\n                                                      (&gt; enemyY 200) (conj enemy {:y (- (:y enemy) gamestats/playerspeed)})\n                                                      :else enemy)\n                (and (= \&quot;player\&quot; role) (pos-int? ballv))(cond\n                                                          (&lt; enemyY 200) (conj enemy {:y (+ (:y enemy) gamestats/playerspeed)})\n                                                          (&gt; enemyY 200) (conj enemy {:y (- (:y enemy) gamestats/playerspeed)})\n                                                          :else enemy)\n\n                (&lt; (- ballY 50) enemyY) (conj enemy {:y (- (:y enemy) gamestats/playerspeed)})\n                (&gt; (- ballY 50) enemyY) (conj enemy {:y (+ (:y enemy) gamestats/playerspeed)})\n                :else enemy)]\n      (colliders/outofbounds state)\n    ))\n\n(defn ballmover\n  [statelist]\n  ;the ball always moves, check if its above or below the top or bottom, and if it does we invert its Y velocity\n  ;If the ball is hitting a player then we invert its X velocity\n  ;if nothing is hiting the ball and we are within the game window the ball just continues\n  (let [ball\n        (if (colliders/checkBoundsY (second statelist))\n          (colliders/bounce-hori (second statelist))\n          (colliders/bounce-powerup statelist))\n        x (:x ball)\n        y (:y ball)\n        velX (:velX ball)\n        velY (:velY ball)]\n    (conj ball {:x (+ x velX) :y (+ y velY)})\n    ))\n\n(defn update_main [statelist]\n  ; check if the ball is out of bounds, and reset the state if it is!\n (let [ball (first (filter (fn [state] (if (= \&quot;ball\&quot; (:role state)) state nil)) statelist))]\n  (if (reset? ball)\n    (scoreadd statelist)\n    ;map though the statelist\n    (map (fn [state] (let [role (:role state)]\n                     (cond\n                       (and (= role \&quot;player\&quot;) (not gamestats/aipower)) (playermover state)\n                       (and (= role \&quot;player\&quot;) gamestats/aipower) (enemyMover (second statelist) (first statelist))\n                       (= role \&quot;ball\&quot;) (ballmover statelist)\n                       (= role \&quot;enemy\&quot;) (enemyMover (second statelist) (nth statelist 2))\n                       :else state))) statelist))))\n\n\n(q/defsketch lala\n             :title \&quot;tadaaa\&quot;\n             :size [800 600]\n             :setup setup\n             :draw drawIt\n             :update update_main\n             :features [:keep-on-top]\n             :middleware [m/fun-mode])\n&quot;, :offset 7519, :ns &quot;hosttest.server&quot;} {:command &quot;ring.adapter.jetty&quot;, :offset 18, :ns &quot;hosttest.server&quot;} {:command &quot;ring.adapter.jetty/start-jetty&quot;, :offset 30, :ns &quot;hosttest.server&quot;} {:command &quot;(-main )&quot;, :offset 8, :ns &quot;hosttest.server&quot;} {:command &quot;((resolve 'inc) 3)&quot;, :offset 17, :ns &quot;hosttest.server&quot;} {:command &quot;25&quot;, :offset 2, :ns &quot;hosttest.server&quot;} {:command &quot;42&quot;, :offset 2, :ns &quot;hosttest.server&quot;} {:command &quot;(defn cmdhandler\n  [request]\n  (clojure.pprint/pprint (keys request))\n  (swap! commandolist (fn [xs] (conj xs (:query-string request))))\n  (println @commandolist)\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body \&quot;noget andet 222222??????\\n\&quot;})&quot;, :offset 258, :ns &quot;hosttest.server&quot;} {:command &quot;(ns hosttest.server\n  (:require [clojure.java.io :as io]\n            [ring.adapter.jetty :as srv]\n            [compojure.core :refer :all]\n            [compojure.route :as route]\n            [selmer.parser :as selmer])\n  (:import (java.net InetAddress ServerSocket Socket SocketException)\n           (java.io OutputStream OutputStreamWriter PrintWriter BufferedReader InputStreamReader)\n           (clojure.lang LineNumberingPushbackReader))\n  (:use [clojure.main :only (repl)]))&quot;, :offset 479, :ns &quot;hosttest.server&quot;} {:command &quot;(selmer/render-file \&quot;firstpage.html\&quot; {:name \&quot;world\&quot;})&quot;, :offset 50, :ns &quot;hosttest.server&quot;} {:command &quot;(defn commandqueue\n  [_]\n  {:status 200 :body (pr-str @commandolist)}\n  )&quot;, :offset 73, :ns &quot;hosttest.server&quot;} {:command &quot;(gamestarter)&quot;, :offset 12, :ns &quot;hosttest.server&quot;} {:command &quot;(ns hosttest.MyGame\n  (:require [quil.core :as q]\n            [quil.middleware :as m]\n            [hosttest.gamestats :as gamestats]\n            [hosttest.colliders :as colliders]))\n\n(defonce gamestate (atom '()))\n\n\n\n\n\n\n\n\n\n(defn scoreadd\n  [statelist]\n\n    (map (fn [state] (cond\n                       (= \&quot;score\&quot; (:role state)) (let [ball (first (filter (fn [state] (if (= \&quot;ball\&quot; (:role state)) state nil))statelist))]\n                                                   (if (&lt; (:x ball) -20)\n                                                     (conj state {:player2 (+ 1 (:player2 state))})\n                                                     (conj state {:player1 (+ 1 (:player1 state))})))\n                       (= \&quot;player\&quot; (:role state)) (first gamestats/mock-state)\n                       (= \&quot;enemy\&quot; (:role state)) (nth gamestats/mock-state 2)\n                       (= \&quot;ball\&quot; (:role state)) (let [ball (second gamestats/mock-state)\n                                                      ranvelX (+ 3 (rand-int 8))\n                                                      ranvelY (+ 1 (rand-int 4))\n                                                      dir (if (= 1 (- 1 (rand-int 2)))\n                                                            1\n                                                            -1)]\n                                                  (conj ball {:velX (* dir ranvelX) :velY ranvelY}))\n                       :else state\n                       ))statelist)\n  )\n\n\n\n(defn reset?\n  [ball]\n  (let [x (:x ball)]\n    (if (or (&lt; x -20) (&gt; x 800))\n      true\n      false)))\n\n(defn writescore\n  [state]\n  (let [player1score (:player1 state)\n        player2score (:player2 state)\n        player1 (if gamestats/aipower\n                  \&quot;Nadal\&quot;\n                  \&quot;Player\&quot;)]\n    (q/text (str player1 \&quot;   \&quot; player1score \&quot;        |        \&quot; player2score \&quot;   Mr AI\&quot;) 350 50)\n    )\n  )\n\n(defn writeballspeed\n  [state]\n  (let [velX (:velX state)\n        velY (:velY state)\n        rawspeed (Math/sqrt (+ (* velX velX) (* velY velY)))\n        speed (int (Math/floor rawspeed))]\n    (q/text (str \&quot;speed:  \&quot; speed) 400 90)\n    ;(q/text (str \&quot;SpeedY: \&quot; velY \&quot;   speedX: \&quot; velX) 400 110)\n    ))\n\n\n(defn drawplayer\n  [state]\n  (let [x (:x state)\n        y (:y state)\n        color (:color state)]\n    (q/fill color 255 255)\n    (q/rect x y (first gamestats/playerSize) (second gamestats/playerSize))\n    )\n  )\n\n(defn drawball\n  [state]\n  ;Draw baaaaaaalll\n  (let [x (:x state)\n        y (:y state)\n        color (:color state)\n        velX (Math/sqrt (Math/pow (:velX state) 2))\n        velY (:velY state)]\n\n    (dorun  (cond\n        (&gt; 15 velX) (q/fill  0 255 255)\n        (and (&lt;= 15 velX) (&gt; 10 velX)) (q/fill 0 125 255)\n        (and (&lt;= 10 velX) (&gt; 4 velX)) (q/fill 0 0 255)\n        :else (q/fill 0 0 0))\n    (q/rect x y (first gamestats/ballsize) (second gamestats/ballsize))\n    )))\n\n\n\n\n\n\n\n(defn setup []\n  ;tell quil what framerate / speed of the game and color mode, also gives the initialt state of the game.\n  (q/frame-rate 120)\n  (q/color-mode :hsb)\n  gamestats/mock-state)\n\n\n(defn drawIt\n  [statelist]\n  ;map through the list of states, and draw them. and returns the updated list. DOrun is there to make the lazy map do stuff\n  (q/clear)\n  (dorun (map (fn [state] (let [role (:role state)]\n                            (cond (= \&quot;ball\&quot; role) (do (drawball state) (writeballspeed state))\n                                  (= \&quot;player\&quot; role) (drawplayer state)\n                                  (= \&quot;enemy\&quot; role) (drawplayer state)\n                                  (= \&quot;score\&quot; role) (writescore state)))\n                ) statelist))\n  )\n\n\n(defn player1\n  [statelist]\n  (q/background 240)\n  (for [state statelist]\n    (do (q/fill (:color state) 255 255)\n        (q/with-translation\n          [(/ (q/width) 2)\n           (/ (q/height) 2)]\n          (q/rect (:x state) (:y state) 20 20)))))\n\n\n\n\n\n(defn playermover\n  [state]\n  ;keylistener! If a key is being pressed AND its the w or s key, then we do stuff, else we return the old state...and not move.\n  ;update! it also sets the new velocity in the state depentant on which key is pressed!\n  (let [state1 (cond\n                (and (q/key-pressed?) (= (q/raw-key) \\w)) (conj state {:y (- (:y state) gamestats/playerspeed) :velY gamestats/playerspeed})\n                (and (q/key-pressed?) (= (q/raw-key) \\s)) (conj state {:y (+ (:y state) gamestats/playerspeed) :velY (* -1 gamestats/playerspeed)})\n                :else (conj state { :velY 0}))]\n    (colliders/outofbounds state1))\n  )\n\n(defn enemyMover\n  [ball enemy]\n  ;The enemy moves compared to the ball. If the ball is moving away from it, it will seek to move to the middle\n  ;if the ball is moving towards the enemy it will match its own coordiants with the balls.\n  (let [ballY (:y ball)\n        ballv (:velX ball)\n        enemyY (:y enemy)\n        role (:role enemy)\n        state (cond\n                (and (= \&quot;enemy\&quot; role) (neg? ballv)) (cond\n                                                      (&lt; enemyY 200) (conj enemy {:y (+ (:y enemy) gamestats/playerspeed)})\n                                                      (&gt; enemyY 200) (conj enemy {:y (- (:y enemy) gamestats/playerspeed)})\n                                                      :else enemy)\n                (and (= \&quot;player\&quot; role) (pos-int? ballv))(cond\n                                                          (&lt; enemyY 200) (conj enemy {:y (+ (:y enemy) gamestats/playerspeed)})\n                                                          (&gt; enemyY 200) (conj enemy {:y (- (:y enemy) gamestats/playerspeed)})\n                                                          :else enemy)\n\n                (&lt; (- ballY 50) enemyY) (conj enemy {:y (- (:y enemy) gamestats/playerspeed)})\n                (&gt; (- ballY 50) enemyY) (conj enemy {:y (+ (:y enemy) gamestats/playerspeed)})\n                :else enemy)]\n      (colliders/outofbounds state)\n    ))\n\n(defn ballmover\n  [statelist]\n  ;the ball always moves, check if its above or below the top or bottom, and if it does we invert its Y velocity\n  ;If the ball is hitting a player then we invert its X velocity\n  ;if nothing is hiting the ball and we are within the game window the ball just continues\n  (let [ball\n        (if (colliders/checkBoundsY (second statelist))\n          (colliders/bounce-hori (second statelist))\n          (colliders/bounce-powerup statelist))\n        x (:x ball)\n        y (:y ball)\n        velX (:velX ball)\n        velY (:velY ball)]\n    (conj ball {:x (+ x velX) :y (+ y velY)})\n    ))\n\n(defn update_main [statelist]\n  ; check if the ball is out of bounds, and reset the state if it is!\n (let [ball (first (filter (fn [state] (if (= \&quot;ball\&quot; (:role state)) state nil)) statelist))]\n  (if (reset? ball)\n    (scoreadd statelist)\n    ;map though the statelist\n    (let [statelist (map (fn [state] (let [role (:role state)]\n                                       (cond\n                                         (and (= role \&quot;player\&quot;) (not gamestats/aipower)) (playermover state)\n                                         (and (= role \&quot;player\&quot;) gamestats/aipower) (enemyMover (second statelist) (first statelist))\n                                         (= role \&quot;ball\&quot;) (ballmover statelist)\n                                         (= role \&quot;enemy\&quot;) (enemyMover (second statelist) (nth statelist 2))\n                                         :else state))) statelist)]\n\n      (swap! gamestate (fn [] statelist))\n      statelist\n      )\n    )))\n\n(defn gamestarter\n  []\n(q/defsketch lala\n             :title \&quot;tadaaa\&quot;\n             :size [800 600]\n             :setup setup\n             :draw drawIt\n             :update update_main\n             :features [:keep-on-top]\n             :middleware [m/fun-mode])\n  )&quot;, :offset 7771, :ns &quot;hosttest.server&quot;} {:command &quot;(defonce commandolist (atom []))&quot;, :offset 32, :ns &quot;hosttest.server&quot;} {:command &quot;(def mock-state\n  '({:role \&quot;player\&quot; :type \&quot;entity\&quot; :color 255 :x 20 :y 100 :velX 6 :velY 6}\n     {:role \&quot;ball\&quot; :type \&quot;object\&quot; :color 255 :x 200 :y 200 :velX 5 :velY 5}\n     {:role \&quot;enemy\&quot; :type \&quot;entity\&quot; :color 255 :x 760 :y 200 :velX 6 :velY 6}\n     {:role \&quot;score\&quot; :type \&quot;logic\&quot; :player1 0 :player2 0}))&quot;, :offset 303, :ns &quot;hosttest.server&quot;} {:command &quot;(defn- on-thread [f]\n  (doto (Thread. ^Runnable f)\n    (.start)))&quot;, :offset 65, :ns &quot;hosttest.server&quot;} {:command &quot;(defn- close-socket [^Socket s]\n  (when-not (.isClosed s)\n    (doto s\n      (.shutdownInput)\n      (.shutdownOutput)\n      (.close))))&quot;, :offset 134, :ns &quot;hosttest.server&quot;} {:command &quot;(defn inserter\n  [^Socket s ])&quot;, :offset 30, :ns &quot;hosttest.server&quot;} {:command &quot;(defn- accept-fn [^Socket s connections fun]\n  (let [ins (.getInputStream s)\n        outs (.getOutputStream s)]\n\n    (println \&quot;incoming!!\&quot;)\n    (on-thread #(do\n                  #_(dosync (commute connections conj s))\n                  (try\n                    (fun ins outs s)\n                    (catch SocketException e))\n                  (close-socket s)\n                  (dosync (commute connections disj s))))))&quot;, :offset 419, :ns &quot;hosttest.server&quot;} {:command &quot;(defstruct server-def :server-socket :connections)&quot;, :offset 50, :ns &quot;hosttest.server&quot;} {:command &quot;(defn- create-server-aux [fun ^ServerSocket ss]\n  (let [connections (ref #{})]\n    (on-thread #(when-not (.isClosed ss)\n                  (try\n                    (accept-fn (.accept ss) connections fun)\n                    (catch SocketException e))\n                  (recur)))\n    (struct-map server-def :server-socket ss :connections connections)))&quot;, :offset 351, :ns &quot;hosttest.server&quot;} {:command &quot;(defn create-server\n  \&quot;Creates a server socket on port. Upon accept, a new thread is\n  created which calls:\n  (fun input-stream output-stream)\n  Optional arguments support specifying a listen backlog and binding\n  to a specific endpoint.\&quot;\n  ([port fun backlog ^InetAddress bind-addr]\n   (create-server-aux fun (ServerSocket. port backlog bind-addr)))\n  ([port fun backlog]\n   (create-server-aux fun (ServerSocket. port backlog)))\n  ([port fun]\n   (println \&quot;server started\&quot;)\n   (create-server-aux fun (ServerSocket. port))))&quot;, :offset 523, :ns &quot;hosttest.server&quot;} {:command &quot;(defn close-server [server]\n  (doseq [s @(:connections server)]\n    (close-socket s))\n  (dosync (ref-set (:connections server) #{}))\n  (.close ^ServerSocket (:server-socket server)))&quot;, :offset 182, :ns &quot;hosttest.server&quot;} {:command &quot;(defn connection-count [server]\n  (count @(:connections server)))&quot;, :offset 65, :ns &quot;hosttest.server&quot;} {:command &quot;(defn- socket-repl [ins outs]\n  (binding [*in* (LineNumberingPushbackReader. (InputStreamReader. ins))\n            *out* (OutputStreamWriter. outs)\n            *err* (PrintWriter. ^OutputStream outs true)]\n    (repl)))&quot;, :offset 218, :ns &quot;hosttest.server&quot;} {:command &quot;(defn create-repl-server\n  \&quot;create a repl on a socket\&quot;\n  ([port backlog ^InetAddress bind-addr]\n   (create-server port socket-repl backlog bind-addr))\n  ([port backlog]\n   (create-server port socket-repl backlog))\n  ([port]\n   (create-server port socket-repl)))&quot;, :offset 261, :ns &quot;hosttest.server&quot;} {:command &quot;(defn startgame\n  [s]\n\n  )&quot;, :offset 26, :ns &quot;hosttest.server&quot;} {:command &quot;(defn operator\n  [ins outs s]\n  (loop [socket s]\n    (println \&quot;before\&quot;)\n\n    #_(.readLine (io/reader socket))\n\n    (println \&quot;write to client\&quot;)\n    (let [writer (PrintWriter. (.getOutputStream socket))]\n      (println \&quot;in the let!\&quot;)\n          (.println writer mock-state )\n          (.flush writer)\n          (Thread/sleep 1000)\n\n    (recur socket))))&quot;, :offset 350, :ns &quot;hosttest.server&quot;} {:command &quot;(defn testroute\n  [id]\n    (selmer/render-file \&quot;firstpage.html\&quot; {:name id})\n  )&quot;, :offset 79, :ns &quot;hosttest.server&quot;} {:command &quot;(defn clearcommandqueue\n  [_]\n  (swap! commandolist (fn [_] ([])))\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body \&quot;noget andet \\n\&quot;}\n  )&quot;, :offset 153, :ns &quot;hosttest.server&quot;} {:command &quot;(defn commandqueue\n  [_]\n  {:status 200 :body (pr-str @commandolist)})&quot;, :offset 70, :ns &quot;hosttest.server&quot;} {:command &quot;(defn cmdhandler\n  [request]\n  #_(clojure.pprint/pprint (keys request))\n  (swap! commandolist\n         (fn [xs]\n           (def fujibong request)\n           (conj xs\n                 (:query-string request))))\n  (println @commandolist)\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body \&quot;noget andet \\n\&quot;})&quot;, :offset 319, :ns &quot;hosttest.server&quot;} {:command &quot;(defn showgame\n  [_]\n  {:status 200 :body (pr-str @game/gamestate)}\n  )&quot;, :offset 71, :ns &quot;hosttest.server&quot;} {:command &quot;(defn gamecommand\n  [request]\n  (let [player ]))&quot;, :offset 48, :ns &quot;hosttest.server&quot;} {:command &quot;(defroutes myroutes\n           (GET \&quot;/showgame\&quot; request (showgame request))\n           (GET \&quot;/cmd\&quot; request (cmdhandler request))\n           (GET \&quot;/cmdqueue\&quot; request (commandqueue request))\n           (GET \&quot;/test/:id\&quot; [id] (testroute id))\n           (GET \&quot;/clearcmd\&quot; request (clearcommandqueue request))\n           (GET \&quot;/gamecommand\&quot; request ))&quot;, :offset 344, :ns &quot;hosttest.server&quot;} {:command &quot;(defn ourhandler\n  [x]\n    (println \&quot;yderste handler\&quot;)\n    (#'myroutes x)\n  )&quot;, :offset 77, :ns &quot;hosttest.server&quot;} {:command &quot;(defn -main\n  []\n  (future (srv/run-jetty  #'ourhandler {:port 8082}))\n  (future (game/gamestarter))\n  (println \&quot;STARTED\&quot;)\n\n  #_(create-server 9000 operator))&quot;, :offset 158, :ns &quot;hosttest.server&quot;} {:command &quot;(defn cmdhandler\n  [request]\n  #_(clojure.pprint/pprint (keys request))\n  (println (:params request))\n  (swap! cmdlist\n         (fn [xs]\n           (swap! cmdlist (fn [xs] (conj xs (:query-string request))))))\n  (println @cmdlist)\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body \&quot;noget andet \\n\&quot;})&quot;, :offset 314, :ns &quot;hosttest.server&quot;} {:command &quot;(-main)&quot;, :offset 7, :ns &quot;hosttest.server&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="Repl" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="hosttest" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="269022ad-61dd-4029-a5e3-c6654acafc74" name="Default Changelist" comment="" />
      <created>1551007941393</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1551007941393</updated>
      <workItem from="1551359257597" duration="647000" />
      <workItem from="1551360727716" duration="1917000" />
      <workItem from="1551362757562" duration="3676000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="6240000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="0" width="1536" height="864" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" weight="0.13087249" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" weight="0.30311614" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="Database Changes" order="11" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="REPL" order="6" sideWeight="0.5020408" side_tool="true" weight="0.38590604" />
      <window_info anchor="right" id="Leiningen" order="7" sideWeight="0.4979592" weight="0.3295302" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" id="Database" order="10" />
    </layout>
    <layout-to-restore>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.13087249" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" weight="0.30311614" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="bottom" id="Docker" order="10" show_stripe_button="false" />
      <window_info anchor="bottom" id="Database Changes" order="11" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="REPL" order="6" sideWeight="0.5020408" side_tool="true" visible="true" weight="0.38590604" />
      <window_info anchor="right" id="Leiningen" order="7" sideWeight="0.4979592" weight="0.3295302" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info anchor="right" id="Database" order="10" />
    </layout-to-restore>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="editorHistoryManager">
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.9.0/clojure-1.9.0.jar!/clojure/lang/LineNumberingPushbackReader.class">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="155">
          <caret line="12" column="11" selection-start-line="12" selection-start-column="11" selection-end-line="12" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/io/OutputStreamWriter.java" />
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/io/PrintWriter.java" />
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/net/Socket.java" />
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/io/Writer.java" />
    <entry file="jar://C:/Program Files/Java/jdk-11.0.2/lib/src.zip!/java.base/java/net/ServerSocket.java" />
    <entry file="file://$PROJECT_DIR$/src/hosttest/clientpocket.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="102">
          <caret line="6" selection-start-line="6" selection-end-line="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/gamestats.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="12" selection-start-column="12" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/colliders.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-281">
          <caret line="1" column="21" selection-start-line="1" selection-start-column="21" selection-end-line="1" selection-end-column="21" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/ring_server.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.9.0/clojure-1.9.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="21270">
          <caret line="4339" column="15" selection-start-line="4339" selection-start-column="15" selection-end-line="4339" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="136">
          <caret line="8" column="17" lean-forward="true" selection-start-line="8" selection-start-column="17" selection-end-line="8" selection-end-column="50" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="51">
          <caret line="3" column="2" selection-start-line="3" selection-start-column="2" selection-end-line="3" selection-end-column="2" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/MyGame.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="272">
          <caret line="16" lean-forward="true" selection-start-line="16" selection-end-line="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/resources/firstpage.html">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="153">
          <caret line="9" column="7" lean-forward="true" selection-start-line="9" selection-start-column="7" selection-end-line="9" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/server.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="136">
          <caret line="140" selection-start-line="140" selection-end-line="140" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/hosttest/cmdmonitor.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="297">
          <caret line="9" column="35" lean-forward="true" selection-start-line="9" selection-start-column="35" selection-end-line="9" selection-end-column="35" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>hosttest</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: bouncycastle/bcmail-jdk14:138</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>